Google Vision PDF Extractor with Layout PreservationThis Python script utilizes the Google Cloud Vision API to perform Optical Character Recognition (OCR) on multi-page PDF documents. Unlike simple text extraction, this tool leverages the Vision API's document analysis capabilities to retrieve every recognized word along with its precise bounding box coordinates (left, top, width, height).This layout information is crucial for downstream tasks like table detection, custom formatting, and highly accurate text reconstruction, especially for multilingual documents (e.g., English and Telugu).‚ú® FeaturesHigh-Accuracy OCR: Utilizes Google's powerful Cloud Vision engine.Multilingual Support: Explicitly configured to recognize English ('en') and Telugu ('te') via language hints.Layout Preservation: Extracts word-level coordinates (left, top, width, height).Structured Output: Results are compiled into a highly usable Pandas DataFrame, including page, block, paragraph, and word identifiers.Authentication Check: Includes a built-in check for Google Cloud credentials before initiating the API call.üõ†Ô∏è Prerequisites and Setup1. Google Cloud ConfigurationBefore running the script, you must configure your Google Cloud Project:Enable the API: Ensure the Cloud Vision API is enabled in your Google Cloud Project.Service Account: Create a Service Account and download its JSON key file.Authentication: Set the GOOGLE_APPLICATION_CREDENTIALS environment variable to point to the path of your downloaded JSON key file.Linux/macOS:export GOOGLE_APPLICATION_CREDENTIALS="/path/to/your/keyfile.json"
Windows:set GOOGLE_APPLICATION_CREDENTIALS="C:\path\to\your\keyfile.json"
2. Python DependenciesInstall the required Python packages using pip:pip install pandas google-cloud-vision
üöÄ Usage1. Run the ScriptThe script defines a function pdf_to_layout_data and includes an example block in the if __name__ == "__main__": section.Modify the Path: Update the dummy_pdf_path variable in the if __name__ == "__main__": block to point to your target PDF file:dummy_pdf_path = "path/to/your/document.pdf" 
Execute: Run the script from your terminal:python google_vision_ocr.py
2. Example Output AnalysisThe script will print a summary of the resulting DataFrame, which contains the following key columns for every word detected:ColumnDescriptionpage_numThe page number where the word was found.block_numThe block identifier on the page (e.g., column, large area).par_numThe paragraph identifier within the block.word_numThe index of the word within the paragraph.textThe recognized word string.leftX-coordinate of the word's top-left corner (from left edge).topY-coordinate of the word's top-left corner (from top edge).widthWidth of the word's bounding box.heightHeight of the word's bounding box.confidenceOCR confidence score (0.0 to 1.0).The demonstration section shows how to use the layout columns (block_num, par_num, top) to reconstruct the text flow, grouping words back into paragraphs and sorting them vertically.üí° CustomizationIf you need to process different languages, you can modify the language_hints in the pdf_to_layout_data function by replacing or adding new ISO 639-1 language codes:# In pdf_to_layout_data function:
image_context = vision.ImageContext(language_hints=["en", "te", "es", "fr"]) # Example for Spanish and French
